import bpy
import os
from bpy.types import Panel, Operator, PropertyGroup
from bpy.props import StringProperty, BoolProperty, EnumProperty, PointerProperty, FloatProperty

bl_info = {
    "name": "DayZ Fahrzeug Generator Professional",
    "author": "Assistant",
    "version": (2, 0),
    "blender": (2, 80, 0),
    "location": "3D-Ansicht > Seitenleiste > DayZ Werkzeuge",
    "description": "Professioneller DayZ Fahrzeug Generator mit erweiterten Funktionen",
    "category": "Object",
}

class DayZVehicleSettings(PropertyGroup):
    vehicle_name: StringProperty(
        name="Fahrzeugname",
        description="Name des zu erstellenden Fahrzeugs",
        default="Vehicle"
    )
    
    vehicle_type: EnumProperty(
        name="Fahrzeugtyp",
        items=[
            ('PKW', "PKW", "Normales Auto"),
            ('SUV', "SUV/Geländewagen", "Sport Utility Vehicle"),
            ('PICKUP', "Pickup", "Pickup-Truck"),
            ('LKW', "LKW", "Lastkraftwagen"),
            ('BUS', "Bus", "Bus oder Kleinbus")
        ],
        default='PKW'
    )
    
    auto_setup: BoolProperty(
        name="Automatisches Setup",
        description="Automatisch Teile erkennen und einrichten",
        default=True
    )
    
    create_proxies: BoolProperty(
        name="Proxies erstellen",
        description="Erstellt Proxy-Objekte für zerstörbare Teile",
        default=True
    )
    
    generate_configs: BoolProperty(
        name="Konfigurationen erstellen",
        description="Erstellt config.cpp und model.cfg",
        default=True
    )
    
    damage_level: FloatProperty(
        name="Beschädigungsgrad",
        description="Stärke der Beschädigung (0.1 = wenig, 1.0 = stark)",
        min=0.1,
        max=1.0,
        default=0.3
    )

class DAYZ_OT_setup_vehicle(Operator):
    bl_idname = "dayz.setup_vehicle"
    bl_label = "Fahrzeug einrichten"
    bl_description = "Richtet das ausgewählte Fahrzeug für DayZ ein"
    
    def create_collections(self, context):
        settings = context.scene.dayz_vehicle_settings
        vehicle_name = settings.vehicle_name
        
        # Hauptkollektion erstellen
        main_col = bpy.data.collections.new(vehicle_name)
        context.scene.collection.children.link(main_col)
        
        # Basis-Collections
        base_collections = [
            "0.000",
            "Geometry",
            "Memory",
            "View_Geometry",
            "Fire_Geometry"
        ]
        
        collections_dict = {}
        # Basis-Collections erstellen
        for col_name in base_collections:
            col = bpy.data.collections.new(col_name)
            main_col.children.link(col)
            collections_dict[col_name] = col
            
        # Proxy-Collections erstellen
        proxy_collections = [
            "proxy_door_1_1",
            "proxy_door_2_1",
            "proxy_door_1_2",
            "proxy_door_2_2",
            "proxy_hood",
            "proxy_trunk",
            "proxy_wheel_1_1",
            "proxy_wheel_1_2",
            "proxy_wheel_2_1",
            "proxy_wheel_2_2"
        ]
        
        for proxy_name in proxy_collections:
            col = bpy.data.collections.new(proxy_name)
            main_col.children.link(col)
            collections_dict[proxy_name] = col
            
        return collections_dict
    
    def create_memory_points(self, context, collections):
        memory_points = {
            # Anzeigen
            "dial_speed": {"pos": (0, 0, 1), "type": "display"},
            "dial_rpm": {"pos": (0.1, 0, 1), "type": "display"},
            "dial_fuel": {"pos": (-0.1, 0, 1), "type": "display"},
            "dial_temp": {"pos": (0.2, 0, 1), "type": "display"},
            
            # Sitze
            "pos_driver": {"pos": (-0.4, 0, 0.5), "type": "seat"},
            "pos_codriver": {"pos": (0.4, 0, 0.5), "type": "seat"},
            "pos_cargo1": {"pos": (-0.4, -1, 0.5), "type": "seat"},
            "pos_cargo2": {"pos": (0.4, -1, 0.5), "type": "seat"},
            
            # Beschädigungspunkte
            "dmg_wheel_1_1": {"pos": (-0.8, 1.2, 0.3), "type": "damage"},
            "dmg_wheel_1_2": {"pos": (-0.8, -1.2, 0.3), "type": "damage"},
            "dmg_wheel_2_1": {"pos": (0.8, 1.2, 0.3), "type": "damage"},
            "dmg_wheel_2_2": {"pos": (0.8, -1.2, 0.3), "type": "damage"}
        }
        
        for name, data in memory_points.items():
            empty = bpy.data.objects.new(name=name, object_data=None)
            empty.empty_display_type = 'PLAIN_AXES'
            empty.location = data["pos"]
            collections["Memory"].objects.link(empty)
    
    def setup_vehicle_parts(self, context, collections):
        settings = context.scene.dayz_vehicle_settings
        
        # Standardteile mit korrekter Platzierung
        parts = {
            "Geometry": [
                {"name": "wheel_1_1", "type": "mesh"},
                {"name": "wheel_1_2", "type": "mesh"},
                {"name": "wheel_2_1", "type": "mesh"},
                {"name": "wheel_2_2", "type": "mesh"},
                {"name": "door_1_1", "type": "mesh"},
                {"name": "door_2_1", "type": "mesh"},
                {"name": "hood", "type": "mesh"},
                {"name": "trunk", "type": "mesh"}
            ]
        }
        
        # Proxy-Teile definieren
        proxy_parts = {
            "proxy_door_1_1": [{"name": "proxy_door_1_1", "type": "mesh"}],
            "proxy_door_2_1": [{"name": "proxy_door_2_1", "type": "mesh"}],
            "proxy_door_1_2": [{"name": "proxy_door_1_2", "type": "mesh"}],
            "proxy_door_2_2": [{"name": "proxy_door_2_2", "type": "mesh"}],
            "proxy_hood": [{"name": "proxy_hood", "type": "mesh"}],
            "proxy_trunk": [{"name": "proxy_trunk", "type": "mesh"}],
            "proxy_wheel_1_1": [{"name": "proxy_wheel_1_1", "type": "mesh"}],
            "proxy_wheel_1_2": [{"name": "proxy_wheel_1_2", "type": "mesh"}],
            "proxy_wheel_2_1": [{"name": "proxy_wheel_2_1", "type": "mesh"}],
            "proxy_wheel_2_2": [{"name": "proxy_wheel_2_2", "type": "mesh"}]
        }
        
        # Standardteile erstellen
        for collection_name, parts_list in parts.items():
            if collection_name in collections:
                for part in parts_list:
                    if part["type"] == "mesh":
                        mesh = bpy.data.meshes.new(name=part["name"])
                        obj = bpy.data.objects.new(part["name"], mesh)
                    else:  # empty
                        obj = bpy.data.objects.new(name=part["name"], object_data=None)
                        obj.empty_display_type = 'PLAIN_AXES'
                    
                    collections[collection_name].objects.link(obj)
        
        # Proxy-Teile erstellen
        if settings.create_proxies:
            for collection_name, parts_list in proxy_parts.items():
                if collection_name in collections:
                    for part in parts_list:
                        mesh = bpy.data.meshes.new(name=part["name"])
                        obj = bpy.data.objects.new(part["name"], mesh)
                        collections[collection_name].objects.link(obj)
    
    def create_config_files(self, context):
        settings = context.scene.dayz_vehicle_settings
        vehicle_name = settings.vehicle_name
        
        # Config.cpp erstellen
        config_content = f"""class CfgPatches
{{
    class {vehicle_name}
    {{
        units[] = {{}};
        weapons[] = {{}};
        requiredVersion = 0.1;
        requiredAddons[] = {{"DZ_Vehicles_Parts"}};
    }};
}};

class CfgVehicles
{{
    class CarScript;
    class {vehicle_name}: CarScript
    {{
        scope = 2;
        displayName = "{vehicle_name}";
        model = "\\{vehicle_name}\\{vehicle_name}.p3d";
        
        class DamageSystem
        {{
            class GlobalHealth
            {{
                class Health
                {{
                    hitpoints = 1000;
                }};
            }};
        }};
    }};
}};"""
        
        # Model.cfg erstellen
        model_content = f"""class CfgSkeletons
{{
    class {vehicle_name}_Skeleton
    {{
        isDiscrete = 1;
        skeletonInherit = "";
        skeletonBones[] = 
        {{
            "wheel_1_1","",
            "wheel_1_2","",
            "wheel_2_1","",
            "wheel_2_2","",
            "door_1_1","",
            "door_2_1",""
        }};
    }};
}};

class CfgModels
{{
    class {vehicle_name}
    {{
        skeletonName = "{vehicle_name}_Skeleton";
        sections[] = 
        {{
            "lights",
            "reflectors",
            "wheels",
            "doors"
        }};
    }};
}};"""
        
        # Dateien speichern
        filepath = os.path.dirname(bpy.data.filepath)
        if filepath:
            with open(os.path.join(filepath, "config.cpp"), 'w') as f:
                f.write(config_content)
                
            with open(os.path.join(filepath, "model.cfg"), 'w') as f:
                f.write(model_content)
    
    def execute(self, context):
        try:
            # Collections erstellen
            collections = self.create_collections(context)
            
            # Memory Points erstellen
            self.create_memory_points(context, collections)
            
            # Fahrzeugteile erstellen und einordnen
            self.setup_vehicle_parts(context, collections)
            
            # Konfigurationsdateien erstellen
            if context.scene.dayz_vehicle_settings.generate_configs:
                self.create_config_files(context)
            
            self.report({'INFO'}, "Fahrzeug erfolgreich eingerichtet!")
            return {'FINISHED'}
            
        except Exception as e:
            self.report({'ERROR'}, f"Fehler beim Einrichten: {str(e)}")
            return {'CANCELLED'}

class DAYZ_PT_main_panel(Panel):
    bl_label = "DayZ Fahrzeug Generator"
    bl_idname = "DAYZ_PT_main_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'DayZ Tools'
    
    def draw(self, context):
        layout = self.layout
        settings = context.scene.dayz_vehicle_settings
        
        # Fahrzeugname Eingabe
        box = layout.box()
        box.label(text="Fahrzeugeinstellungen:")
        box.prop(settings, "vehicle_name")
        box.prop(settings, "vehicle_type")
        
        # Grundeinstellungen
        box = layout.box()
        box.label(text="Grundeinstellungen:")
        box.prop(settings, "auto_setup")
        box.prop(settings, "create_proxies")
        
        # Erweiterte Einstellungen
        box = layout.box()
        box.label(text="Erweiterte Einstellungen:")
        box.prop(settings, "generate_configs")
        box.prop(settings, "damage_level")
        
        # Setup Button
        layout.separator()
        row = layout.row()
        row.scale_y = 2.0
        row.operator("dayz.setup_vehicle", text="Fahrzeug einrichten", icon='AUTO')

def register():
    bpy.utils.register_class(DayZVehicleSettings)
    bpy.utils.register_class(DAYZ_OT_setup_vehicle)
    bpy.utils.register_class(DAYZ_PT_main_panel)
    bpy.types.Scene.dayz_vehicle_settings = PointerProperty(type=DayZVehicleSettings)

def unregister():
    del bpy.types.Scene.dayz_vehicle_settings
    bpy.utils.unregister_class(DAYZ_PT_main_panel)
    bpy.utils.unregister_class(DAYZ_OT_setup_vehicle)
    bpy.utils.unregister_class(DayZVehicleSettings)

if __name__ == "__main__":
    register()
